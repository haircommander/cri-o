// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cri-o/cri-o/utils/cmdrunner (interfaces: CommandRunner)

// Package cmdrunnermock is a generated GoMock package.
package cmdrunnermock

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockCommandRunner is a mock of CommandRunner interface
type MockCommandRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCommandRunnerMockRecorder
}

// MockCommandRunnerMockRecorder is the mock recorder for MockCommandRunner
type MockCommandRunnerMockRecorder struct {
	mock *MockCommandRunner
}

// NewMockCommandRunner creates a new mock instance
func NewMockCommandRunner(ctrl *gomock.Controller) *MockCommandRunner {
	mock := &MockCommandRunner{ctrl: ctrl}
	mock.recorder = &MockCommandRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandRunner) EXPECT() *MockCommandRunnerMockRecorder {
	return m.recorder
}

// ExecCmd mocks base method
func (m *MockCommandRunner) ExecCmd(arg0 ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecCmd", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCmd indicates an expected call of ExecCmd
func (mr *MockCommandRunnerMockRecorder) ExecCmd(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCmd", reflect.TypeOf((*MockCommandRunner)(nil).ExecCmd), arg0...)
}

// ExecCmdWithStdin mocks base method
func (m *MockCommandRunner) ExecCmdWithStdin(arg0 io.Reader, arg1 ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecCmdWithStdin", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCmdWithStdin indicates an expected call of ExecCmdWithStdin
func (mr *MockCommandRunnerMockRecorder) ExecCmdWithStdin(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCmdWithStdin", reflect.TypeOf((*MockCommandRunner)(nil).ExecCmdWithStdin), varargs...)
}
